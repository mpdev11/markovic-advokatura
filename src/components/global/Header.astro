---
import { navigation } from "../../data/navigation";
import logo from "../../assets/images/logo.svg";

const basePath = import.meta.env.BASE_URL;
const currentPath = Astro.url.pathname;
---

<header class="fixed top-0 left-0 right-0 z-50 transition-all duration-300" id="header">
  <nav class="mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8" aria-label="Global">
    <div class="flex lg:flex-1">
      <a href={`${basePath}`} class="-m-1.5 p-1.5">
        <img src={logo.src} alt="Logo" class="h-12 lg:h-20 lg:hover:opacity-80 lg:transition-opacity lg:duration-200" />
      </a>
    </div>
    <div class="flex lg:hidden">
      <button type="button" class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5" id="mobile-menu-button">
        <span class="sr-only">Otvori mobilni meni</span>
        <svg
          class="hamburger-icon size-10 text-gray-900"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="1.5"
          stroke="currentColor"
          aria-hidden="true"
          data-slot="icon">
          <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
        </svg>
      </button>
    </div>
    <div class="hidden lg:flex lg:gap-x-12">
      {
        navigation.map((item) => {
          const itemFullPath = `${basePath}${item.path}`.replace(/\/+/g, "/");
          const isActive = currentPath === itemFullPath || (item.path !== "/" && currentPath.startsWith(itemFullPath));

          return (
            <div class="relative group primary-navigation">
              <a
                href={`${basePath}${item.path}`}
                class={`text-lg/6 font-semibold flex items-center gap-1 justify-center text-gray-900 ${!item.children ? `relative after:content-[''] after:absolute after:bottom-0 after:left-0 after:right-0 after:h-[2px] after:bg-current ${isActive ? "after:scale-x-100" : "after:scale-x-0 hover:after:scale-x-100"} after:transition-transform after:duration-300 after:origin-center pb-1` : ""}`}>
                {item.label}
                {item.children && (
                  <svg class="w-4 h-4 mt-[4px]" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5" />
                  </svg>
                )}
              </a>
              {item.children && (
                <div
                  class="absolute left-0 top-full w-max bg-white rounded-md shadow-lg 
                opacity-0 invisible group-hover:opacity-100 group-hover:visible
                transition-all duration-200 transform origin-top-left 
                scale-95 group-hover:scale-100 overflow-hidden">
                  {item.children.map((child, index) => (
                    <a
                      href={`${basePath}${child.path}`}
                      class="block p-2 text-sm hover:bg-gray-100 hover:text-gray-700 flex items-center gap-2 border-b border-gray-200 last:border-b-0 first:rounded-t-md last:rounded-b-md text-lg">
                      <div class="text-primary flex-shrink-0 flex items-center justify-center [&>svg]:w-7 [&>svg]:h-7" set:html={child.icon} />
                      {child.label}
                    </a>
                  ))}
                </div>
              )}
            </div>
          );
        })
      }
    </div>
    <div class="hidden lg:flex lg:flex-1 lg:justify-end">
      <a
        href={`${basePath}#contact`}
        class="inline-flex items-center justify-center gap-2 px-4 py-2 text-lg font-semibold bg-primary rounded-lg hover:bg-primary/90 transition-colors text-background">
        <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75">
          </path>
        </svg>
        Kontakt
      </a>
    </div>
  </nav>
  <!-- Mobile menu -->
  <div class="lg:hidden mobile-menu hidden" role="dialog" aria-modal="true">
    <!-- Background backdrop -->
    <div class="fixed inset-0 z-10 bg-black bg-opacity-25 transition-opacity duration-300" id="mobile-backdrop"></div>
    <div
      class="fixed inset-y-0 right-0 z-10 w-full overflow-y-auto bg-white px-6 py-6 sm:max-w-sm sm:ring-1 sm:ring-gray-900/10 transform translate-x-full transition-transform duration-300 ease-in-out"
      id="mobile-menu-panel">
      <div class="flex items-center justify-between">
        <a href={`${basePath}`} class="-m-1.5 p-1.5">
          <img src={logo.src} alt="Logo" class="h-16 w-auto" />
        </a>
        <button type="button" class="-m-2.5 rounded-md p-2.5" id="mobile-menu-close">
          <span class="sr-only">Close menu</span>
          <svg class="size-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <div class="mt-6 flow-root">
        <div class="-my-6 divide-y divide-gray-500/10">
          <div class="space-y-2 py-6">
            {
              navigation.map((item) => (
                <div>
                  {item.children ? (
                    <button
                      class="w-full rounded-lg px-3 py-2 text-base/7 font-semibold hover:bg-gray-50 hover:text-gray-900 flex items-center justify-between mobile-dropdown-toggle"
                      data-target={`mobile-dropdown-${item.label.toLowerCase().replace(/\s+/g, "-")}`}>
                      {item.label}
                      <svg class="w-4 h-4 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5" />
                      </svg>
                    </button>
                  ) : (
                    <a
                      href={`${basePath}${item.path}`}
                      class="block rounded-lg px-3 py-2 text-base/7 font-semibold hover:bg-gray-50 hover:text-gray-900">
                      {item.label}
                    </a>
                  )}
                  {item.children && (
                    <div
                      class="mobile-dropdown hidden overflow-hidden transition-all duration-300 ease-in-out max-h-0"
                      id={`mobile-dropdown-${item.label.toLowerCase().replace(/\s+/g, "-")}`}>
                      <div class="py-2 space-y-1">
                        {item.children.map((child, index) => (
                          <a
                            href={`${basePath}${child.path}`}
                            class="block rounded-lg py-2 px-3 text-sm/7 font-semibold hover:bg-gray-50 hover:text-gray-900 flex items-center gap-2">
                            <div class="text-primary flex-shrink-0 flex items-center justify-center [&>svg]:w-6 [&>svg]:h-6" set:html={child.icon} />
                            {child.label}
                          </a>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))
            }
          </div>
          <div class="py-6">
            <a
              href={`${basePath}#contact`}
              class="inline-flex items-center justify-center gap-2 px-4 py-2 text-sm font-semibold bg-primary rounded-lg hover:bg-primary/90 transition-colors text-background w-full">
              <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75">
                </path>
              </svg>
              Kontakt
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  function initHeader() {
    const isHomePage =
      window.location.pathname === import.meta.env.BASE_URL ||
      window.location.pathname === import.meta.env.BASE_URL.replace(/\/$/, "") ||
      window.location.pathname === "/";

    const header = document.getElementById("header");

    // Remove any existing scroll listeners to avoid duplicates
    const existingHandler = (window as any).__headerScrollHandler;
    if (existingHandler) {
      window.removeEventListener("scroll", existingHandler);
    }

    if (isHomePage && header) {
      header.classList.remove("bg-white", "shadow-md");
      header.classList.add("bg-transparent", "shadow-none");

      // Function to handle scroll
      function handleScroll() {
        if (!header) return;
        if (window.scrollY > 50) {
          header.classList.remove("bg-transparent", "shadow-none");
          header.classList.add("bg-white", "shadow-md");
        } else {
          header.classList.remove("bg-white", "shadow-md");
          header.classList.add("bg-transparent", "shadow-none");
        }
      }

      // Store the handler reference for cleanup
      (window as any).__headerScrollHandler = handleScroll;
      window.addEventListener("scroll", handleScroll);

      handleScroll();
    } else if (header) {
      header.classList.remove("bg-transparent", "shadow-none");
      header.classList.add("bg-white", "shadow-md");
    }

    // Mobile menu functionality
    const mobileMenuButton = document.getElementById("mobile-menu-button");
    const mobileMenuClose = document.getElementById("mobile-menu-close");
    const mobileMenu = document.querySelector(".mobile-menu");
    const mobileMenuPanel = document.getElementById("mobile-menu-panel");
    const mobileBackdrop = document.getElementById("mobile-backdrop");

    function openMobileMenu() {
      if (mobileMenu) {
        mobileMenu.classList.remove("hidden");

        setTimeout(() => {
          if (mobileBackdrop) mobileBackdrop.classList.add("bg-opacity-25");
          if (mobileMenuPanel) mobileMenuPanel.classList.remove("translate-x-full");
        }, 10);

        document.body.style.overflow = "hidden";
      }
    }

    function closeMobileMenu() {
      if (mobileBackdrop) mobileBackdrop.classList.remove("bg-opacity-25");
      if (mobileMenuPanel) mobileMenuPanel.classList.add("translate-x-full");

      setTimeout(() => {
        if (mobileMenu) {
          mobileMenu.classList.add("hidden");
          document.body.style.overflow = "";
        }
      }, 300);
    }

    if (mobileMenuButton) {
      mobileMenuButton.addEventListener("click", openMobileMenu);
    }

    if (mobileMenuClose) {
      mobileMenuClose.addEventListener("click", closeMobileMenu);
    }

    if (mobileBackdrop) {
      mobileBackdrop.addEventListener("click", closeMobileMenu);
    }

    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && mobileMenu && !mobileMenu.classList.contains("hidden")) {
        closeMobileMenu();
      }
    });

    // Mobile dropdown functionality
    const mobileDropdownToggles = document.querySelectorAll(".mobile-dropdown-toggle");

    mobileDropdownToggles.forEach((toggle) => {
      toggle.addEventListener("click", () => {
        const targetId = toggle.getAttribute("data-target");
        if (!targetId) return;

        const dropdown = document.getElementById(targetId);
        const arrow = toggle.querySelector("svg");

        if (dropdown && arrow) {
          const isExpanded = dropdown.style.maxHeight !== "0px" && dropdown.style.maxHeight !== "";

          if (isExpanded) {
            // Collapse dropdown
            dropdown.style.maxHeight = "0px";
            arrow.style.transform = "rotate(0deg)";

            // Hide after animation
            setTimeout(() => {
              dropdown.classList.add("hidden");
            }, 300);
          } else {
            // Expand dropdown
            dropdown.classList.remove("hidden");

            // Trigger animation after a small delay
            setTimeout(() => {
              const scrollHeight = dropdown.scrollHeight;
              dropdown.style.maxHeight = scrollHeight + "px";
              arrow.style.transform = "rotate(180deg)";
            }, 10);
          }
        }
      });
    });
  }

  document.addEventListener("astro:page-load", initHeader);
</script>
